
    /**
     * Generated by graphql-ruby-client
     *
    */

    /**
     * Map local operation names to persisted keys on the server
     * @return {Object}
     * @private
    */
    var _aliases = {
  "chargeUser": "349ad6fb98ac99dedffae36c24c60b9a",
  "createForumPost": "83b16995aa78801ef12537414bcf51f2",
  "sendDirectMessageToUser": "38aa93543f0b1d1c23a10567090f3199",
  "sendMessageToWhopChat": "2cf9bbab9c615f353b93390c4b45fc57",
  "sendMessageToChatFeed": "4745013c60b763407d64f914736b8004",
  "SendNotification": "3f9b7e6c31fb95604b39c8e362440cf0",
  "TransferFunds": "bcad199992fe242875a7e74b8bfa6e75",
  "getAccessPass": "0e73cd82d221684422ac28805b9cd31a",
  "getCompanyLedgerAccount": "1bc40474c7d6e5a7d85932c7c991c7e4",
  "getCurrentUser": "05fadbd064f6f4abfb3015604e6e1ba9",
  "getExperience": "6679ef30eaa84ff05f584b4686b079c0",
  "retrieveUserLedgerAccount": "9f5859d16545d89220d5ddcbdbfeefc2",
  "getUser": "16b64084e4c3d9f9ce7f46e9d845a9b4",
  "checkIfUserHasAccessToExperience": "b1b0c2fc765bc0ad54da12219f30c1cc",
  "checkIfUserHasAccessToAccessPass": "0c5dfb704c00bfc445fc4c9cae178447",
  "checkIfUserHasAccessToCompany": "ac9478334b9726eada085a8884762637",
  "GetExperiencesForCompanyOrWhop": "6fbac86940d8e09820763ec7c650e28d",
  "listMessagesForFeed": "bc7d06b9d653664758f8ce453fff887a"
}

    /**
     * The client who synced these operations with the server
     * @return {String}
     * @private
    */
    var _client = "altair"

    var OperationStoreClient = {
      /**
       * Build a string for `params[:operationId]`
       * @param {String} operationName
       * @return {String} stored operation ID
      */
      getOperationId: function(operationName) {
        return _client + "/" + OperationStoreClient.getPersistedQueryAlias(operationName)
      },

      /**
       * Fetch a persisted alias from a local operation name
       * @param {String} operationName
       * @return {String} persisted alias
      */
      getPersistedQueryAlias: function(operationName) {
        var persistedAlias = _aliases[operationName]
        if (!persistedAlias) {
          throw new Error("Failed to find persisted alias for operation name: " + operationName)
        } else {
          return persistedAlias
        }
      },

      /**
       * Satisfy the Apollo Link API.
       * This link checks for an operation name, and if it's present,
       * sets the HTTP context to _not_ include the query,
       * and instead, include `extensions.operationId`.
       * (This is inspired by apollo-link-persisted-queries.)
      */
      apolloLink: function(operation, forward) {
        if (operation.operationName) {
          const operationId = OperationStoreClient.getOperationId(operation.operationName)
          operation.setContext({
            http: {
              includeQuery: false,
              includeExtensions: true,
            }
          })
          operation.extensions.operationId = operationId
        }
        return forward(operation)
      },
      /**
       * Satisfy the Apollo middleware API.
       * Replace the query with an operationId
      */
      apolloMiddleware: {
        applyBatchMiddleware: function(options, next) {
          options.requests.forEach(function(req) {
            // Fetch the persisted alias for this operation
            req.operationId = OperationStoreClient.getOperationId(req.operationName)
            // Remove the now-unused query string
            delete req.query
            return req
          })
          // Continue the request
          next()
        },

        applyMiddleware: function(options, next) {
          var req = options.request
          // Fetch the persisted alias for this operation
          req.operationId = OperationStoreClient.getOperationId(req.operationName)
          // Remove the now-unused query string
          delete req.query
          // Continue the request
          next()
        }
      }
    }

    module.exports = OperationStoreClient
    
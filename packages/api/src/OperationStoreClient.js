/**
 * Generated by graphql-ruby-client
 *
 */

/**
 * Map local operation names to persisted keys on the server
 * @return {Object}
 * @private
 */
var _aliases = {
  ChargeUser: "cb6a79f3568da31dde8e9bb17b00a27d",
  CreateForumPost: "d208240f5665e43cd1512a9821e18600",
  SendDirectMessageToUser: "3f281c48c953e66d85cbe79ff1beeb9b",
  SendMessageToWhopChat: "2d82e399fe963f99365a473602c8ac0f",
  SendMessageToChatFeed: "1e514ae729d31379d48f69af5532cc04",
  SendNotification: "3f9b7e6c31fb95604b39c8e362440cf0",
  TransferFunds: "bcad199992fe242875a7e74b8bfa6e75",
  GetAccessPassDetails: "b540ec3b684586e940cfb63cbca01486",
  GetCompanyLedgerAccount: "0333ec507e0cc95bff2fa75b4e4db41f",
  GetCurrentUser: "16b896b9e7b1dfdb9984e4597bbe3873",
  GetExperience: "fa60da67b3cce8bd197509c5cf5877a3",
  GetPublicUser: "51ec14d508d876cbf043050940c1d40c",
  GetUserLedgerAccount: "b3c98c5f15761e7b5b956c5ae89e4b39",
  CheckIfUserHasAccessToExperience: "2bebbda57a742e3772cdc5993ef3326c",
  CheckIfUserHasAccessToAccessPass: "685feff29603d2e9f413f7bc5a581f50",
  CheckIfUserHasAccessToCompany: "99cf0f3b094f3c1c54d1d1c701b2e1c5",
  GetExperiencesForCompanyOrWhop: "6fbac86940d8e09820763ec7c650e28d",
  GetMessagesForFeed: "8599d42e27fe0e28cfc2c25efa794802",
};

/**
 * The client who synced these operations with the server
 * @return {String}
 * @private
 */
var _client = "altair";

var OperationStoreClient = {
  /**
   * Build a string for `params[:operationId]`
   * @param {String} operationName
   * @return {String} stored operation ID
   */
  getOperationId: (operationName) =>
    _client + "/" + OperationStoreClient.getPersistedQueryAlias(operationName),

  /**
   * Fetch a persisted alias from a local operation name
   * @param {String} operationName
   * @return {String} persisted alias
   */
  getPersistedQueryAlias: (operationName) => {
    var persistedAlias = _aliases[operationName];
    if (!persistedAlias) {
      throw new Error(
        "Failed to find persisted alias for operation name: " + operationName
      );
    } else {
      return persistedAlias;
    }
  },

  /**
   * Satisfy the Apollo Link API.
   * This link checks for an operation name, and if it's present,
   * sets the HTTP context to _not_ include the query,
   * and instead, include `extensions.operationId`.
   * (This is inspired by apollo-link-persisted-queries.)
   */
  apolloLink: (operation, forward) => {
    if (operation.operationName) {
      const operationId = OperationStoreClient.getOperationId(
        operation.operationName
      );
      operation.setContext({
        http: {
          includeQuery: false,
          includeExtensions: true,
        },
      });
      operation.extensions.operationId = operationId;
    }
    return forward(operation);
  },
  /**
   * Satisfy the Apollo middleware API.
   * Replace the query with an operationId
   */
  apolloMiddleware: {
    applyBatchMiddleware: (options, next) => {
      options.requests.forEach((req) => {
        // Fetch the persisted alias for this operation
        req.operationId = OperationStoreClient.getOperationId(
          req.operationName
        );
        // Remove the now-unused query string
        delete req.query;
        return req;
      });
      // Continue the request
      next();
    },

    applyMiddleware: (options, next) => {
      var req = options.request;
      // Fetch the persisted alias for this operation
      req.operationId = OperationStoreClient.getOperationId(req.operationName);
      // Remove the now-unused query string
      delete req.query;
      // Continue the request
      next();
    },
  },
};

module.exports = OperationStoreClient;
